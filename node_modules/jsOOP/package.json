{
  "name": "jsOOP",
  "version": "0.0.1",
  "description": "Object-oriented syntax sugar for JavaScript",
  "main": "./index.js",
  "dependencies": {},
  "devDependencies": {
    "browserify": "~2.33.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-yuidoc": "~0.5.0",
    "grunt-contrib-uglify": "~0.2.4",
    "grunt-browserify": "~1.2.5",
    "grunt-contrib-nodeunit": "~0.2.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/MikkoH/jsOOP"
  },
  "author": {
    "name": "Mikko Haapoja",
    "email": "mikko@jam3.com"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MikkoH/jsOOP/issues"
  },
  "readme": "jsOOP\n=====\n\nThis library is a way to \"sugar\" some object oriented functionality in Javascript. It's syntactically based on MooTools \nClass.\n\nSo to define a class with a function called foo you'd do the following:\n```javascript\nvar NewClass = new Class({\n  foo: function() { }\n});\n```\nReserved Keywords\n-----------------\nThere are a few reserved keywords in this library which are:\n\n* initialize\n* Extends\n* parent\n\ninitialize\n----------\nInitialize is used to define a constructor within a function like so:\n```javascript\nvar NewClass = new Class({\n  initialize: function() {\n    console.log( 'I AM CONSTRUCTOR ** said with transformer voice **' );\n  },\n  foo: function() { }\n});\n```\n\nExtends\n-------\nExtends is used to define inheritance of objects. Let's continue with our example and create a new class that will inherit\nfrom ```NewClass``` and will be called ```NewNewClass```. \n\n```javascript\nvar NewClass = new Class({\n  initialize: function() {\n    console.log( 'I AM CONSTRUCTOR ** said with transformer voice **' );\n  },\n  foo: function() { \n    console.log( 'I am foo of base class' );  \n  }\n});\n\nvar NewNewClass = new Class({\n  initialize: function() {\n    console.log( 'I AM CONSTRUCTOR NEW NEW' );\n  },\n  \n  Extends: NewClass,\n  \n  foo: function() { \n    console.log( 'I am foo of sub class' );  \n  }\n});\n```\nAs a note Extends is spelt with a capital \"E\" since in Javascript ```extends``` is a reserved keyword for future purposes.\n\n\nparent\n------\n```parent``` is actually a funtion which will be added to each and every ```Class```. It is used to call super class functions.\n\nFor instance in our example above we could call the super classes function ```foo``` using the following syntax:\n```javascript\nvar NewClass = new Class({\n  initialize: function() {\n    console.log( 'I AM CONSTRUCTOR ** said with transformer voice **' );\n  },\n  foo: function() { \n    console.log( 'I am foo of base class' );  \n  }\n});\n\nvar NewNewClass = new Class({\n  initialize: function() {\n    console.log( 'I AM CONSTRUCTOR NEW NEW' );\n    \n    this.parent();\n  },\n  \n  Extends: NewClass,\n  \n  foo: function() { \n    console.log( 'I am foo of sub class' );\n    \n    this.parent();\n  }\n});\n```\n\nAlso note that ```this.parent();``` will work for constructors, getters and setters also. Getters and setters?\n\ngetters and setters\n-------------------\nYep with this library you can quickly define getters and setters. This is how you'd define getters and setters:\n\n```javascript\nvar TiredOfTheAboveExample = new Class({\n  _myProp: 0,\n  _secondProp: 'I EXIST',\n  \n  myProp: {\n    get: function() {\n      return this._prop;\n    },\n    \n    set: function( value ) {\n      this._prop = value;\n    }\n  },\n  \n  secondProp: {\n    get: function() {\n      return this._secondProp;\n    },\n    \n    set: function( value ) {\n      this._secondProp = value;\n    }\n  }\n});\n```\n",
  "_id": "jsOOP@0.0.1",
  "dist": {
    "shasum": "650fa1dedecad2781d16300f880a6dbb773f3200"
  },
  "_resolved": "git+ssh://git@github.com:mattdesl/jsOOP#e7514e6e07da361614ad45b7c7850467b52a2d59",
  "_from": "git+ssh://git@github.com:mattdesl/jsOOP",
  "_fromGithub": true
}
